from aiogram import F, Router, Bot
from aiogram.types import Message, FSInputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from asyncio import sleep
from random import randint

import app.utils.keyboards as kb
import app.database.requests as rq
from app.core.config import ADMIN


class States(StatesGroup):
    name = State()

router = Router()


@router.message(CommandStart())
async def registration(message: Message, state: FSMContext):
    user = await rq.get_user(message.from_user.id)
    if user:
        await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money}', reply_markup=kb.main)
    else:
        await state.set_state(States.name)
        await message.answer('–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∏–º—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!')
    
    
@router.message(States.name)
async def statistics(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    
    await rq.add_user(message.from_user.id, data['name'])
    user = await rq.get_user(message.from_user.id)

    await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money}', reply_markup=kb.main)
    await state.clear()
    
    
@router.message(F.text == '—Ä–∞–±–æ—Ç–∞')
async def job(message: Message):
    user = await rq.get_user(message.from_user.id)
    
    if user.laptop == True:
        await message.answer(f'{user.name}, –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å!', 
                             reply_markup=kb.work_laptop)
    else:
        await message.answer(f'{user.name}, –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å!', 
                             reply_markup=kb.work)
    
    
@router.message(F.text == 'üì¶ –≥—Ä—É–∑—á–∏–∫')
async def loader(message: Message):
    user = await rq.get_user(message.from_user.id)
    
    await message.answer(f'{user.name}, —Ç—ã –ø–æ–ø–∞–ª –Ω–∞ —Å–∫–ª–∞–¥, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–Ω–µ—Å—Ç–∏ –∫–æ—Ä–æ–±–∫—É\n'
                         '–ø–ª–∞—Ç–∞ –∑–∞ 1 –∫–æ—Ä–æ–±–∫—É $600-900',
                         reply_markup=kb.loader)
    
    
@router.message(F.text == '–æ—Ç–Ω–µ—Å—Ç–∏')
async def attribute(message: Message):
    await message.answer('—Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å –∫–æ—Ä–æ–±–∫—É')
    await sleep(5)
    
    user = await rq.update_money(message.from_user.id, randint(6, 9)*100)
    await message.answer(f'—Ç—ã –æ—Ç–Ω–µ—Å –∫–æ—Ä–æ–±–∫—É, —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å ${user.money}', reply_markup=kb.loader)
    
    
@router.message(F.text == 'üöï —Ç–∞–∫—Å–∏—Å—Ç')
async def taxi_driver(message: Message):
    user = await rq.get_user(message.from_user.id)
    
    await message.answer(f'{user.name}, —Ç—ã –ø–æ–ø–∞–ª –≤ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫, –±–µ—Ä–∏ —Å–≤–æ–π –∑–∞–∫–∞–∑.',
                         reply_markup=kb.taxi_driver)
    
    
@router.message(F.text == '–≤–∑—è—Ç—å –∑–∞–∫–∞–∑')
async def take_the_order(message: Message):
    await message.answer('–æ–∂–∏–¥–∞–π –∑–∞–∫–∞–∑')
    await sleep(3)
    
    await message.answer('–ö —Ç–µ–±–µ –ø–æ–¥—Å–µ–ª –º–æ–ª–æ–¥–æ–π –ø–∞—Ä–µ–Ω—å, '
                         '–æ–Ω –ø—Ä–æ—Å–∏—Ç —Ç–µ–±—è –æ—Ç–≤–µ–∑—Ç–∏ –≤ —Å–æ—Å–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥.\n'
                         '–ü–ª–∞—Ç–∞ –∑–∞ –ø–æ–µ–∑–¥–∫—É: $4.500', reply_markup=kb.take)


@router.message(F.text == '–æ—Ç–≤–µ–∑—Ç–∏')
async def take(message: Message):
    await message.answer('–≤—ã –µ–¥–µ—Ç–µ —Å –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º –≤ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥...')
    await sleep(30)
    
    user = await rq.update_money(message.from_user.id, 4500)
    await message.answer(f'—Ç—ã –æ—Ç–≤–µ–∑ –ø–∞—Å—Å–∞–∂–∏—Ä–∞, –∏ –ø–æ–ª—É—á–∏–ª $4.500\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user.money}')
    
    await message.answer(f'{user.name}, —Ç—ã –ø–æ–ø–∞–ª –≤ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫, –±–µ—Ä–∏ —Å–≤–æ–π –∑–∞–∫–∞–∑.',
                         reply_markup=kb.taxi_driver)


@router.message(F.text == '–æ—Ç–∫–∞–∑–∞—Ç—å')
async def refusal(message: Message):
    user = await rq.get_user(message.from_user.id)
    
    await message.answer(f'{user.name}, —Ç—ã –ø–æ–ø–∞–ª –≤ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫, –±–µ—Ä–∏ —Å–≤–æ–π –∑–∞–∫–∞–∑.',
                         reply_markup=kb.taxi_driver)

    
@router.message(F.text == '‚ö° —ç–ª–µ–∫—Ç—Ä–∏–∫')
async def electrician(message: Message):
    user = await rq.get_user(message.from_user.id)
    
    await message.answer(f'{user.name}, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∏–¥—Ç–∏ –∫ –¥–æ–º—É —á–∏–Ω–∏—Ç—å –ø—Ä–æ–≤–æ–¥–∫—É', 
                         reply_markup=kb.electrician)
    
    
@router.message(F.text == '–∏–¥—Ç–∏')
async def go(message: Message):
    await message.answer('—Ç—ã –∏–¥–µ—à—å –∫ –¥–æ–º—É')
    await sleep(5)

    await message.answer('—Ç—ã –¥–æ—à–µ–ª –¥–æ –¥–æ–º–∞, —Ç–µ–ø–µ—Ä—å —á–∏–Ω–∏ –ø—Ä–æ–≤–æ–¥–∫—É', reply_markup=kb.wiring)
    
    
@router.message(F.text == '—á–∏–Ω–∏—Ç—å')
async def repair(message: Message):
    await message.answer('—Ç—ã —á–∏–Ω–∏—à—å –ø—Ä–æ–≤–æ–¥–∫—É')
    await sleep(20)
    
    user = await rq.update_money(message.from_user.id, 3000)
    await message.answer(f'—Ç—ã –ø–æ—á–∏–Ω–∏–ª –ø—Ä–æ–≤–æ–¥–∫—É –∏ –∑–∞ —ç—Ç–æ –ø–æ–ª—É—á–∏–ª $3.000\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user.money}')
    await message.answer(f'{user.name}, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∏–¥—Ç–∏ –∫ –¥–æ–º—É —á–∏–Ω–∏—Ç—å –ø—Ä–æ–≤–æ–¥–∫—É', 
                         reply_markup=kb.electrician)
    
    
@router.message(F.text == 'üíª —Ö–∞–∫–µ—Ä')
async def hacker(message: Message):
    user = await rq.get_user(message.from_user.id)
    await message.answer(f'{user.name}, —Ç—ã —Ç–µ–ø–µ—Ä—å —Ö–∞–∫–µ—Ä!\n'
                         '—Ç–≤–æ—è —Ü–µ–ª—å –≤–∑–ª–∞–º—ã–≤–∞—Ç—å –±–∞–Ω–∫–∏, –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ –∏ –≤—Å—è–∫–æ–µ –¥—Ä—É–≥–æ–µ!\n'
                         '—Ç–≤–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –±—É–¥–µ—Ç –≤ —Ä–∞–π–æ–Ω–µ $15.000 - 30.000.\n–Ω–æ –µ—Å—Ç—å —à–∞–Ω—Å 20% '
                         '—á—Ç–æ —Ç–µ–±—è –ø–æ–π–º–∞–µ—Ç –ø–æ–ª–∏—Ü–∏—è –∏ –≤—ã–¥–∞—Å—Ç —à—Ç—Ä–∞—Ñ –≤ —Ä–∞–∑–º–µ—Ä–µ $30.000\n'
                         '—Ç—ã –≥–æ—Ç–æ–≤?', reply_markup=kb.hacker)
    
    
@router.message(F.text == '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
async def continuee(message: Message):
    await message.answer('–∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–∑–ª–æ–º–∞... (–∑–∞–π–º–µ—Ç 1 –º–∏–Ω—É—Ç—É)')
    await sleep(10)
    if randint(1, 5) == 1:
        await message.answer('–≤–∞—Å –ø–æ–π–º–∞–ª–∞ –ø–æ–ª–∏—Ü–∏—è!')
        user = await rq.update_money(message.from_user.id, -30000)
        await message.answer(f'—É–≤—ã, –≤–∑–ª–æ–º –Ω–µ —É–¥–∞–ª—Å—è –∏ —Å –≤–∞—Å —Å–Ω—è–ª–∏ $30.000. –≤–∞—à –±–∞–ª–∞–Ω—Å ${user.money}')
        await message.answer(f'{user.name}, —Å–¥–µ–ª–∞–µ–º –≤–∑–ª–æ–º –µ—â–µ —Ä–∞–∑?', reply_markup=kb.hacker)
    else:
        user = await rq.update_money(message.from_user.id, randint(15, 30)*1000)
        await message.answer(f'–≤–∑–ª–æ–º —É–¥–∞–ª—Å—è! —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å ${user.money}')
        await message.answer(f'{user.name}, —Å–¥–µ–ª–∞–µ–º –≤–∑–ª–æ–º –µ—â–µ —Ä–∞–∑?', reply_markup=kb.hacker)
    
    
@router.message(F.text == '–±–∏–∑–Ω–µ—Å')
async def businesses(message: Message):
    user = await rq.get_user(message.from_user.id)
    if user.business == None: 
        await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –µ–≥–æ –∫—É–ø–∏—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ',
                             reply_markup=kb.catalog)
    else:
        await message.answer_photo(photo=FSInputFile('app/photos/cafe.jpg'),
                                   caption='–¢–≤–æ–π –±–∏–∑–Ω–µ—Å: –ö–∞—Ñ–µ\n'
                                   f'–ü—Ä–æ–¥—É–∫—Ç—ã –±–∏–∑–Ω–µ—Å–∞: {user.business_products}\n'
                                   f'–ó–∞–∫–∞–∑–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {user.ordered_products}',
                                   reply_markup=kb.business)
      
      
@router.message(F.text == '–ö–∞—Ç–∞–ª–æ–≥')
async def catalog(message: Message):
    await message.answer_photo(photo=FSInputFile('app/photos/cafe.jpg'),
                               caption='–ë–∏–∑–Ω–µ—Å—ã –≤ –ø—Ä–æ–¥–∞–∂–µ:\n–ö–∞—Ñ–µ: $50.000',
                               reply_markup=kb.buy)
   
   
@router.message(F.text == '–ö—É–ø–∏—Ç—å')
async def buy(message: Message):
    user = await rq.get_user(message.from_user.id)
    if user.money >= 50000:
        await rq.update_business(message.from_user.id)
        await rq.update_money(message.from_user.id, -50000)
        await message.answer_photo(photo=FSInputFile('app/photos/cafe.jpg'),
                                   caption='–¢–≤–æ–π –±–∏–∑–Ω–µ—Å: –ö–∞—Ñ–µ\n'
                                   f'–ü—Ä–æ–¥—É–∫—Ç—ã –±–∏–∑–Ω–µ—Å–∞: {user.business_products}\n'
                                   f'–ó–∞–∫–∞–∑–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {user.ordered_products}',
                                   reply_markup=kb.business)
    else:    
        await message.answer('–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥')
        await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money}', reply_markup=kb.main)
   
      
@router.message(F.text == '–°–∫–ª–∞–¥')
async def warehouse(message: Message):
    user = await rq.get_user(message.from_user.id)
    await message.answer(f'–°–∫–ª–∞–¥ —Ç–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞\n–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥–µ: {user.ordered_products}',
                         reply_markup=kb.order)
    
    
@router.message(F.text == '–ü—Ä–æ–¥–∞—Ç—å')
async def sell(message: Message):
    user = await rq.update_money_business(message.from_user.id)
    await message.answer(f'–í—ã –ø—Ä–æ–¥–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã! –í–∞—à –±–∞–ª–∞–Ω—Å ${user.money}', reply_markup=kb.main)
    
    
@router.message(F.text == '–∑–∞–∫–∞–∑–∞—Ç—å')
async def order(message: Message):
    user = await rq.get_user(message.from_user.id)
    if user.ordered_products > 1:
        await message.answer('–í—ã —É–∂–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã, –∏–ª–∏ –∂–µ –æ–Ω–∏ —É –≤–∞—Å –µ—Å—Ç—å', reply_markup=kb.main)
    else:
        await message.answer(f'–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user.money}\n'
                            '–†–∞–∑–º–µ—Ä–∞ —Ç–≤–æ–µ–≥–æ —Å–∫–ª–∞–¥–∞ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ 20.000 –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n'
                            '–ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –≤–µ—Å—å —Å–∫–ª–∞–¥ $40.000', reply_markup=kb.warehouse)
    
    
@router.message(F.text == '–ó–∞–∫–∞–∑–∞—Ç—å')
async def order_to_warehouse(message: Message):
    user = await rq.get_user(message.from_user.id)
    if user.money >= 40000:
        await message.answer('–í—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –∑–∞–∫–∞–∑. –û–∂–∏–¥–∞–π—Ç–µ')
        await sleep(3)
        await rq.update_money(message.from_user.id, -40000)
        await rq.update_ordered_products(message.from_user.id)
        await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money-40000}', reply_markup=kb.main)
        minute = 60
        await sleep(minute*3)
        await rq.update_business_products(message.from_user.id)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.', reply_markup=kb.main)
        await message.answer_photo(photo=FSInputFile('app/photos/cafe.jpg'),
                                   caption='–¢–≤–æ–π –±–∏–∑–Ω–µ—Å: –ö–∞—Ñ–µ\n'
                                   f'–ü—Ä–æ–¥—É–∫—Ç—ã –±–∏–∑–Ω–µ—Å–∞: {user.business_products}\n'
                                   f'–ó–∞–∫–∞–∑–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {user.ordered_products}',
                                   reply_markup=kb.business)
      
      
@router.message(F.text == '–º–∞–≥–∞–∑–∏–Ω')
async def shop(message: Message):
    user = await rq.get_user(message.from_user.id)
    if user.laptop == True:
        await message.answer('–º–∞–≥–∞–∑–∏–Ω —Ç–µ—Ö–Ω–∏–∫–∏ –ø—É—Å—Ç!')
        await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money}', reply_markup=kb.main)
    else:
        await message.answer('–û—Ç–∫—Ä—ã–ª—Å—è –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω —Ç–µ—Ö–Ω–∏–∫–∏!\n–ù–æ—É—Ç–±—É–∫: $40.000', 
                             reply_markup=kb.buy_laptop)
      
      
@router.message(F.text == 'K—É–ø–∏—Ç—å')
async def buy_laptop(message: Message):
    user = await rq.get_user(message.from_user.id)
    if user.money >= 40000:
        await rq.update_laptop(message.from_user.id)
        await rq.update_money(message.from_user.id, -40000)
        await message.answer('–≤—ã –∫—É–ø–∏–ª–∏ –Ω–æ—Ç–±—É–∫!\n(–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç!)')
        await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money}', reply_markup=kb.main)
    else:    
        await message.answer('–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥')
        await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money}', reply_markup=kb.main)
      
      
@router.message(F.text == '—Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤')
async def statistics_players(message: Message):
    top_players = await rq.top_players()
    
    if not top_players:
        await message.answer('–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç.')
        
    response = '–¢–æ–ø-5 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:\n\n'
    for i, user in enumerate(top_players, 1):
        response += f'{i}.  {user.name} - ${user.money}\n'
        
    await message.answer(response, reply_markup=kb.main)
      
      
@router.message(Command('bebra'))
async def send_to_all(message: Message, bot: Bot):
    if message.from_user.id == ADMIN:
        if len(message.text.split()) < 2:
            await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n/bebra –≤–∞—à —Ç–µ–∫—Å—Ç')
            return
    
        text_to_send = ' '.join(message.text.split()[1:])
    
        users = await rq.get_all_users()
    
        if not users:
            await message.reply("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
    
        success = 0
        for user in users:
                await bot.send_message(chat_id=user.tg_id, text=text_to_send)
                success += 1
    
        await message.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ {len(users)}")
    else:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω.')
      
    
@router.message(F.text == '–Ωa–∑a–¥')
async def back(message: Message):
    user = await rq.get_user(message.from_user.id)
    if user.business == None: 
        await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –µ–≥–æ –∫—É–ø–∏—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ')
    else:
        await message.answer_photo(photo=FSInputFile('app/photos/cafe.jpg'),
                                   caption='–¢–≤–æ–π –±–∏–∑–Ω–µ—Å: –ö–∞—Ñ–µ\n'
                                   f'–ü—Ä–æ–¥—É–∫—Ç—ã –±–∏–∑–Ω–µ—Å–∞: {user.business_products}\n'
                                   f'–ó–∞–∫–∞–∑–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {user.ordered_products}',
                                   reply_markup=kb.business)
    
    
@router.message(F.text == '–ù–∞–∑–∞–¥')
async def back(message: Message):
    user = await rq.get_user(message.from_user.id)
    await message.answer(f'–°–∫–ª–∞–¥ —Ç–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞\n–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥–µ: {user.business_products}',
                         reply_markup=kb.order)
    
    
@router.message(F.text == '–Ω–∞–∑a–¥')
async def back(message: Message):
    user = await rq.get_user(message.from_user.id)
    
    await message.answer(f'{user.name}, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∏–¥—Ç–∏ –∫ –¥–æ–º—É —á–∏–Ω–∏—Ç—å –ø—Ä–æ–≤–æ–¥–∫—É', 
                         reply_markup=kb.electrician)
    
    
@router.message(F.text == '–ùa–∑a–¥')
async def back(message: Message):
    user = await rq.get_user(message.from_user.id)
    await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money}', reply_markup=kb.main)
    
    
@router.message(F.text == '–Ω–∞–∑–∞–¥')
async def back(message: Message):
    user = await rq.get_user(message.from_user.id)
    await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money}', reply_markup=kb.main)
    
    
@router.message(F.text)
async def what(message: Message):
    await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')