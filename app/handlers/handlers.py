from aiogram import F, Router, Bot
from aiogram.types import Message, FSInputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramForbiddenError
from asyncio import sleep
from random import randint, choice
from datetime import datetime, timedelta

import app.utils.keyboards as kb
import app.database.requests as rq
from app.data.clients import clients
from app.core.config import ADMIN


class States(StatesGroup):
    name = State()
    menu = State()
    job = State()
    loader = State()
    electrician = State()
    wiring_repair = State()
    taxi_driver = State()
    waiting_for_accept = State()
    hacker = State()
    catalog = State()
    buy_business = State()
    business = State()
    business_warehouse = State()
    warehouse = State()
    shop = State()

router = Router()


@router.message(CommandStart())
async def registration(message: Message, state: FSMContext):
    user = await rq.get_user(message.from_user.id)
    if user:
        await state.set_state(States.menu)
        await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money}', reply_markup=kb.main)
    else:
        await state.set_state(States.name)
        await message.answer('–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∏–º—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!')
    
    
@router.message(States.name)
async def statistics(message: Message, state: FSMContext):
    name = message.text
    
    await rq.add_user(message.from_user.id, name)
    user = await rq.get_user(message.from_user.id)

    await state.set_state(States.menu)
    await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money}', reply_markup=kb.main)

    
@router.message(Command('bebra'))
async def send_to_all(message: Message, bot: Bot):
    if message.from_user.id == ADMIN:
        if len(message.text.split()) < 2:
            await message.reply('–Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n/bebra –≤–∞—à —Ç–µ–∫—Å—Ç')
            return
    
        text_to_send = ' '.join(message.text.split()[1:])
    
        users = await rq.get_all_users()
    
        if not users:
            await message.reply("–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
    
        success = 0
        blocked = 0
        
        for user in users:
            try:
                await bot.send_message(chat_id=user.tg_id, text=text_to_send)
                success += 1
            except TelegramForbiddenError:
                await rq.delete_user(user.tg_id)
                blocked += 1
    
        await message.reply(f'‚úÖ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ {len(users)}\n'
                            f'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {blocked}')
    else:
        await message.answer('–≤—ã –Ω–µ –∞–¥–º–∏–Ω.')
    
    
@router.message(States.menu)
async def menu(message: Message, state: FSMContext):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å /start')
        return
    
    elif message.text == '—Ä–∞–±–æ—Ç–∞':
        if user.laptop == False:
            await state.set_state(States.job)
            await message.answer(f'{user.name}, –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å!', 
                                 reply_markup=kb.work)
        else:
            await state.set_state(States.job)
            await message.answer(f'{user.name}, –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å!', 
                                 reply_markup=kb.work_laptop)
            
            
    elif message.text == '–±–∏–∑–Ω–µ—Å':
        if user.business == None: 
            await state.set_state(States.catalog)
            await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞, '
                                 '–Ω–æ —Ç—ã –º–æ–∂–µ—à—å –µ–≥–æ –∫—É–ø–∏—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ',
                                 reply_markup=kb.catalog)
        else:
            await state.set_state(States.business)
            await message.answer_photo(photo=FSInputFile('app/data/cafe.jpg'),
                                       caption='—Ç–≤–æ–π –±–∏–∑–Ω–µ—Å: –∫–∞—Ñ–µ\n'
                                       f'–ø—Ä–æ–¥—É–∫—Ç—ã –±–∏–∑–Ω–µ—Å–∞: {user.business_products}\n'
                                       f'–∑–∞–∫–∞–∑–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {user.ordered_products}',
                                       reply_markup=kb.business)
        
        
    elif message.text == '–º–∞–≥–∞–∑–∏–Ω':
        if user.laptop == False:
            await state.set_state(States.shop)
            await message.answer('–æ—Ç–∫—Ä—ã–ª—Å—è –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω —Ç–µ—Ö–Ω–∏–∫–∏!\n–Ω–æ—É—Ç–±—É–∫: $50.000', 
                                 reply_markup=kb.buy)
        else:
            await message.answer('–º–∞–≥–∞–∑–∏–Ω —Ç–µ—Ö–Ω–∏–∫–∏ –ø—É—Å—Ç!')
            await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money}',
                                 reply_markup=kb.main)
            
            
    elif message.text == '—Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤':
        top_players = await rq.top_players()
    
        if not top_players:
            await message.answer('—Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç.')
        
        response = '—Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:\n\n'
        for i, user in enumerate(top_players, 1):
            response += f'{i}.  {user.name} - ${user.money}\n'
        
        await message.answer(response, reply_markup=kb.main)
        
        
    else:
        await message.answer('–∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')
    
    
@router.message(States.job)
async def job(message: Message, state: FSMContext):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å /start')
        return
    
    if message.text == 'üì¶ –≥—Ä—É–∑—á–∏–∫':
        await state.set_state(States.loader)
        await message.answer(f'{user.name}, —Ç—ã –ø–æ–ø–∞–ª –Ω–∞ —Å–∫–ª–∞–¥, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–Ω–µ—Å—Ç–∏ –∫–æ—Ä–æ–±–∫—É\n'
                             '–ø–ª–∞—Ç–∞ –∑–∞ 1 –∫–æ—Ä–æ–±–∫—É $600-900',
                             reply_markup=kb.loader)
        
        
    elif message.text == '‚ö° —ç–ª–µ–∫—Ç—Ä–∏–∫':
        await state.set_state(States.electrician)
        await message.answer(f'{user.name}, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∏–¥—Ç–∏ –∫ –¥–æ–º—É —á–∏–Ω–∏—Ç—å –ø—Ä–æ–≤–æ–¥–∫—É', 
                             reply_markup=kb.electrician)
    
    
    elif message.text == 'üöï —Ç–∞–∫—Å–∏—Å—Ç':
        await state.set_state(States.taxi_driver)
        await message.answer(f'{user.name}, —Ç—ã –ø–æ–ø–∞–ª –≤ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫, –±–µ—Ä–∏ —Å–≤–æ–π –∑–∞–∫–∞–∑.',
                             reply_markup=kb.taxi_driver)
        
        
    elif message.text == 'üíª —Ö–∞–∫–µ—Ä':
        await state.set_state(States.hacker)
        await message.answer(f'{user.name}, —Ç—ã —Ç–µ–ø–µ—Ä—å —Ö–∞–∫–µ—Ä!\n'
                            '—Ç–≤–æ—è —Ü–µ–ª—å –≤–∑–ª–∞–º—ã–≤–∞—Ç—å –±–∞–Ω–∫–∏, –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ –∏ –≤—Å—è–∫–æ–µ –¥—Ä—É–≥–æ–µ!\n'
                            '—Ç–≤–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –±—É–¥–µ—Ç –≤ —Ä–∞–π–æ–Ω–µ $15.000 - 30.000.\n–Ω–æ –µ—Å—Ç—å —à–∞–Ω—Å 20% '
                            '—á—Ç–æ —Ç–µ–±—è –ø–æ–π–º–∞–µ—Ç –ø–æ–ª–∏—Ü–∏—è –∏ –≤—ã–¥–∞—Å—Ç —à—Ç—Ä–∞—Ñ –≤ —Ä–∞–∑–º–µ—Ä–µ $30.000\n'
                            '—Ç—ã –≥–æ—Ç–æ–≤?', reply_markup=kb.hacker)
        
        
    elif message.text == '–Ω–∞–∑–∞–¥':
        await state.set_state(States.menu)
        await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money}', reply_markup=kb.main)
        
        
    else:
        await message.answer('–∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')
    
    
@router.message(States.loader)
async def loader(message: Message, state: FSMContext):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å /start')
        return
    
    if message.text == '–æ—Ç–Ω–µ—Å—Ç–∏':
        user_data = await state.get_data()
        last_carry = user_data.get('last_carry_time')
        
        if last_carry and datetime.now() - last_carry < timedelta(seconds=5):
            remaining = 5 - (datetime.now() - last_carry).seconds
            await message.answer(f'–ø–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫. –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å–ª–µ–¥—É—é—â–µ–π –∫–æ—Ä–æ–±–∫–∏', 
                                 reply_markup=kb.loader)
            return

        await state.update_data(last_carry_time=datetime.now())
        
        await message.answer('—Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å –∫–æ—Ä–æ–±–∫—É')
        await sleep(5)
    
        user = await rq.update_money(message.from_user.id, randint(6, 9)*100)
        await message.answer(f'—Ç—ã –æ—Ç–Ω–µ—Å –∫–æ—Ä–æ–±–∫—É, —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å ${user.money}',
                             reply_markup=kb.loader)
        
        
    elif message.text == '–Ω–∞–∑–∞–¥':
        if user.laptop == False:
            await state.set_state(States.job)
            await message.answer(f'{user.name}, –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å!', 
                                 reply_markup=kb.work)
        else:
            await state.set_state(States.job)
            await message.answer(f'{user.name}, –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å!', 
                                 reply_markup=kb.work_laptop)

     
    else:
        await message.answer('–∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')
    
    
@router.message(States.electrician)
async def electrician(message: Message, state: FSMContext):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å /start')
        return
    
    if message.text == '–∏–¥—Ç–∏':
        await message.answer('—Ç—ã –∏–¥–µ—à—å –∫ –¥–æ–º—É')
        await sleep(5)

        await state.set_state(States.wiring_repair)
        await message.answer('—Ç—ã –¥–æ—à–µ–ª –¥–æ –¥–æ–º–∞, —Ç–µ–ø–µ—Ä—å —á–∏–Ω–∏ –ø—Ä–æ–≤–æ–¥–∫—É', reply_markup=kb.wiring)
        
            
    elif message.text == '–Ω–∞–∑–∞–¥':
        if user.laptop == False:
            await state.set_state(States.job)
            await message.answer(f'{user.name}, –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å!', 
                                 reply_markup=kb.work)
        else:
            await state.set_state(States.job)
            await message.answer(f'{user.name}, –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å!', 
                                 reply_markup=kb.work_laptop)
            
            
    else:
        await message.answer('–∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')
        
    
@router.message(States.wiring_repair)
async def wiring_repair(message: Message, state: FSMContext):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å /start')
        return
    
    if message.text == '—á–∏–Ω–∏—Ç—å':
        user_data = await state.get_data()
        last_carry = user_data.get('last_carry_time')
        
        if last_carry and datetime.now() - last_carry < timedelta(seconds=20):
            remaining = 20 - (datetime.now() - last_carry).seconds
            await message.answer(f'–ø–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫. –ø–µ—Ä–µ–¥ –ø–æ—á–∏–Ω–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–æ–¥–∫–æ–π', 
                                 reply_markup=kb.loader)
            return

        await state.update_data(last_carry_time=datetime.now())
        
        await message.answer('—Ç—ã —á–∏–Ω–∏—à—å –ø—Ä–æ–≤–æ–¥–∫—É')
        await sleep(20)
    
        user = await rq.update_money(message.from_user.id, 3000)
        await message.answer(f'—Ç—ã –ø–æ—á–∏–Ω–∏–ª –ø—Ä–æ–≤–æ–¥–∫—É –∏ –∑–∞ —ç—Ç–æ –ø–æ–ª—É—á–∏–ª $3.000\n'
                             f'—Ç–≤–æ–π –±–∞–ª–∞–Ω—Å: {user.money}')
        await state.set_state(States.electrician)
        await message.answer(f'{user.name}, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∏–¥—Ç–∏ –∫ –¥–æ–º—É —á–∏–Ω–∏—Ç—å –ø—Ä–æ–≤–æ–¥–∫—É', 
                             reply_markup=kb.electrician) 
            
    elif message.text == '–Ω–∞–∑–∞–¥':
        await state.set_state(States.electrician)
        await message.answer(f'{user.name}, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∏–¥—Ç–∏ –∫ –¥–æ–º—É —á–∏–Ω–∏—Ç—å –ø—Ä–æ–≤–æ–¥–∫—É', 
                             reply_markup=kb.electrician) 
    
    
    else:
        await message.answer('–∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')
    
    
@router.message(States.taxi_driver)
async def taxi_driver(message: Message, state: FSMContext):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å /start')
        return
    
    if message.text == '–≤–∑—è—Ç—å –∑–∞–∫–∞–∑':
        await message.answer('–æ–∂–∏–¥–∞–π –∑–∞–∫–∞–∑')
        await sleep(3)
    
        client = choice(list(clients.values()))
        await state.update_data(current_client=client)
        await state.set_state(States.waiting_for_accept)
    
        await message.answer(client['description'], reply_markup=kb.take)
    
    
    elif message.text == '–Ω–∞–∑–∞–¥':
        if user.laptop == False:
            await state.set_state(States.job)
            await message.answer(f'{user.name}, –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å!', 
                                 reply_markup=kb.work)
        else:
            await state.set_state(States.job)
            await message.answer(f'{user.name}, –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å!', 
                                 reply_markup=kb.work_laptop)
        
    
    else:
        await message.answer('–∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')
    
    
@router.message(States.waiting_for_accept)
async def waiting_for_accept(message: Message, state: FSMContext):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å /start')
        return
    
    if message.text == '–æ—Ç–≤–µ–∑—Ç–∏':
        data = await state.get_data()
        client = data['current_client']
        
        user_data = await state.get_data()
        last_carry = user_data.get('last_carry_time')
        
        if last_carry and datetime.now() - last_carry < timedelta(seconds=client['time']):
            remaining = client['time'] - (datetime.now() - last_carry).seconds
            await message.answer(f'–ø–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–µ–∑–¥–∫–æ–π', 
                                 reply_markup=kb.take)
            return

        await state.update_data(last_carry_time=datetime.now())
 
        await message.answer('–≤—ã –µ–¥–µ—Ç–µ —Å –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º...')
        await sleep(client['time'])
 
        user = await rq.update_money(message.from_user.id, client['reward'])
        await message.answer(f'—Ç—ã –æ—Ç–≤–µ–∑ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –∏ –ø–æ–ª—É—á–∏–ª ${client['reward']}\n'
                             f'—Ç–≤–æ–π –±–∞–ª–∞–Ω—Å: {user.money}')
        
        await state.set_state(States.taxi_driver)
        await message.answer(f'{user.name}, —Ç—ã –ø–æ–ø–∞–ª –≤ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫, –±–µ—Ä–∏ —Å–≤–æ–π –∑–∞–∫–∞–∑.',
                             reply_markup=kb.taxi_driver)
 
    
    elif message.text == '–æ—Ç–∫–∞–∑–∞—Ç—å':
        await state.set_state(States.taxi_driver)
        await message.answer(f'{user.name}, —Ç—ã –ø–æ–ø–∞–ª –≤ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫, –±–µ—Ä–∏ —Å–≤–æ–π –∑–∞–∫–∞–∑.',
                             reply_markup=kb.taxi_driver)
    
    
    else:
        await message.answer('–∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')
    
    
@router.message(States.hacker)
async def hacker(message: Message, state: FSMContext):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å /start')
        return
    
    if message.text == '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        user_data = await state.get_data()
        last_carry = user_data.get('last_carry_time')
        
        if last_carry and datetime.now() - last_carry < timedelta(seconds=60):
            remaining = 60 - (datetime.now() - last_carry).seconds
            await message.answer(f'–ø–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–∑–ª–æ–º–æ–º', 
                                 reply_markup=kb.hacker)
            return
        
        await state.update_data(last_carry_time=datetime.now())
        
        await message.answer('–∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–∑–ª–æ–º–∞... (–∑–∞–π–º–µ—Ç 1 –º–∏–Ω—É—Ç—É)')
        await sleep(60)
        if randint(1, 5) == 1:
            await message.answer('–≤–∞—Å –ø–æ–π–º–∞–ª–∞ –ø–æ–ª–∏—Ü–∏—è!')
            user = await rq.update_money(message.from_user.id, -30000)
            await message.answer(f'—É–≤—ã, –≤–∑–ª–æ–º –Ω–µ —É–¥–∞–ª—Å—è –∏ —Å –≤–∞—Å —Å–Ω—è–ª–∏ $30.000. '
                                 f'–≤–∞—à –±–∞–ª–∞–Ω—Å ${user.money}')
            await message.answer(f'{user.name}, —Å–¥–µ–ª–∞–µ–º –≤–∑–ª–æ–º –µ—â–µ —Ä–∞–∑?', reply_markup=kb.hacker)
        else:
            user = await rq.update_money(message.from_user.id, randint(15, 30)*1000)
            await message.answer(f'–≤–∑–ª–æ–º —É–¥–∞–ª—Å—è! —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å ${user.money}')
            await message.answer(f'{user.name}, —Å–¥–µ–ª–∞–µ–º –≤–∑–ª–æ–º –µ—â–µ —Ä–∞–∑?', reply_markup=kb.hacker)
    
    
    elif message.text == '–Ω–∞–∑–∞–¥':
        if user.laptop == False:
            await state.set_state(States.job)
            await message.answer(f'{user.name}, –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å!', 
                                 reply_markup=kb.work)
        else:
            await state.set_state(States.job)
            await message.answer(f'{user.name}, –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å!', 
                                 reply_markup=kb.work_laptop)
    
    
    else:
        await message.answer('–∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')
    
    
@router.message(States.catalog)
async def catalog(message: Message, state: FSMContext):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å /start')
        return
    
    if message.text == '–∫–∞—Ç–∞–ª–æ–≥':
        await state.set_state(States.buy_business)
        await message.answer_photo(photo=FSInputFile('app/data/cafe.jpg'),
                                   caption='–±–∏–∑–Ω–µ—Å—ã –≤ –ø—Ä–æ–¥–∞–∂–µ:\n–∫–∞—Ñ–µ: $100.000',
                                   reply_markup=kb.buy)
    
    
    elif message.text == '–Ω–∞–∑–∞–¥':
        await state.set_state(States.menu)
        await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money}', reply_markup=kb.main)
    
    
    else:
        await message.answer('–∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')
    
    
@router.message(States.buy_business)
async def buy_business(message: Message, state: FSMContext):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å /start')
        return
    
    if message.text == '–∫—É–ø–∏—Ç—å':
        if user.money >= 100000:
            await rq.update_business(message.from_user.id)
            await rq.update_money(message.from_user.id, -100000)
            await message.answer('–≤—ã –∫—É–ø–∏–ª–∏ –±–∏–∑–Ω–µ—Å!')
            await state.set_state(States.business)
            await message.answer_photo(photo=FSInputFile('app/data/cafe.jpg'),
                                   caption='—Ç–≤–æ–π –±–∏–∑–Ω–µ—Å: –∫–∞—Ñ–µ\n'
                                   f'–ø—Ä–æ–¥—É–∫—Ç—ã –±–∏–∑–Ω–µ—Å–∞: {user.business_products}\n'
                                   f'–∑–∞–∫–∞–∑–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {user.ordered_products}',
                                   reply_markup=kb.business)
        else:    
            await message.answer('—É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥')
            await state.set_state(States.menu)
            await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money}',
                                 reply_markup=kb.main) 
    
    
    elif message.text == '–Ω–∞–∑–∞–¥':
        await state.set_state(States.catalog)
        await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞, '
                             '–Ω–æ —Ç—ã –º–æ–∂–µ—à—å –µ–≥–æ –∫—É–ø–∏—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ',
                             reply_markup=kb.catalog)
    
    else:
        await message.answer('–∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')
    
    
@router.message(States.business)
async def business(message: Message, state: FSMContext):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å /start')
        return
    
    if message.text == '—Å–∫–ª–∞–¥':
        await state.set_state(States.business_warehouse)
        await message.answer(f'—Å–∫–ª–∞–¥ —Ç–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞\n–ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥–µ: {user.ordered_products}',
                             reply_markup=kb.order)
    
    
    elif message.text == '–ø—Ä–æ–¥–∞—Ç—å':
        user = await rq.update_money_business(message.from_user.id)
        await message.answer(f'–≤—ã –ø—Ä–æ–¥–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã! –≤–∞—à –±–∞–ª–∞–Ω—Å ${user.money}')
        await message.answer_photo(photo=FSInputFile('app/data/cafe.jpg'),
                                   caption='—Ç–≤–æ–π –±–∏–∑–Ω–µ—Å: –∫–∞—Ñ–µ\n'
                                   f'–ø—Ä–æ–¥—É–∫—Ç—ã –±–∏–∑–Ω–µ—Å–∞: {user.business_products}\n'
                                   f'–∑–∞–∫–∞–∑–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {user.ordered_products}',
                                   reply_markup=kb.business)
    
    
    elif message.text == '–Ω–∞–∑–∞–¥':
        await state.set_state(States.menu)
        await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money}', reply_markup=kb.main) 
    
    
    else:
        await message.answer('–∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')
    
    
@router.message(States.business_warehouse)
async def business_warehouse(message: Message, state: FSMContext):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å /start')
        return
    
    if message.text == '–∑–∞–∫–∞–∑–∞—Ç—å':
        if user.ordered_products > 1:
            await state.set_state(States.menu)
            await message.answer('–≤—ã —É–∂–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã, –∏–ª–∏ –∂–µ –æ–Ω–∏ —É –≤–∞—Å –µ—Å—Ç—å', 
                                 reply_markup=kb.main)
        else:
            await state.set_state(States.warehouse)
            await message.answer(f'—Ç–≤–æ–π –±–∞–ª–∞–Ω—Å: {user.money}\n'
                                 '—Ä–∞–∑–º–µ—Ä–∞ —Ç–≤–æ–µ–≥–æ —Å–∫–ª–∞–¥–∞ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ 20.000 –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n'
                                 '–∑–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –≤–µ—Å—å —Å–∫–ª–∞–¥ $40.000',
                                 reply_markup=kb.order)
            
            
    elif message.text == '–Ω–∞–∑–∞–¥':
        await state.set_state(States.business)
        await message.answer_photo(photo=FSInputFile('app/data/cafe.jpg'),
                                   caption='—Ç–≤–æ–π –±–∏–∑–Ω–µ—Å: –∫–∞—Ñ–µ\n'
                                   f'–ø—Ä–æ–¥—É–∫—Ç—ã –±–∏–∑–Ω–µ—Å–∞: {user.business_products}\n'
                                   f'–∑–∞–∫–∞–∑–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {user.ordered_products}',
                                   reply_markup=kb.business)
    
    
    else:
        await message.answer('–∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')
    
    
@router.message(States.warehouse)
async def warehouse(message: Message, state: FSMContext):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å /start')
        return
    
    if message.text == '–∑–∞–∫–∞–∑–∞—Ç—å':
        if user.money >= 40000:
            await message.answer('–≤—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –∑–∞–∫–∞–∑. –û–∂–∏–¥–∞–π—Ç–µ')
            await sleep(3)
            await rq.update_money(message.from_user.id, -40000)
            await rq.update_ordered_products(message.from_user.id)
            await state.set_state(States.menu)
            await message.answer('—á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø—Ä–∏–µ–¥—É—Ç –ø—Ä–æ–¥—É–∫—Ç—ã...')
            await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money-40000}', 
                                 reply_markup=kb.main)
            minute = 60
            await sleep(minute*10)
            await rq.update_business_products(message.from_user.id)
        else:
            await message.answer('—É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.')
            await state.set_state(States.business)
            await message.answer_photo(photo=FSInputFile('app/data/cafe.jpg'),
                                       caption='—Ç–≤–æ–π –±–∏–∑–Ω–µ—Å: –∫–∞—Ñ–µ\n'
                                       f'–ø—Ä–æ–¥—É–∫—Ç—ã –±–∏–∑–Ω–µ—Å–∞: {user.business_products}\n'
                                       f'–∑–∞–∫–∞–∑–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {user.ordered_products}',
                                       reply_markup=kb.business)
    
    
    elif message.text == '–Ω–∞–∑–∞–¥':
        await state.set_state(States.business_warehouse)
        await message.answer(f'—Å–∫–ª–∞–¥ —Ç–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞\n–ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥–µ: {user.ordered_products}',
                             reply_markup=kb.order)
    
    
    else:
        await message.answer('–∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')
    
    
@router.message(States.shop)
async def shop(message: Message, state: FSMContext):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å /start')
        return
    
    if message.text == '–∫—É–ø–∏—Ç—å':
        if user.money >= 50000:
            await rq.update_laptop(message.from_user.id)
            await rq.update_money(message.from_user.id, -50000)
            await message.answer('–≤—ã –∫—É–ø–∏–ª–∏ –Ω–æ—É—Ç–±—É–∫!\n(–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç!)')
            await state.set_state(States.menu)
            await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money-50000}', 
                                 reply_markup=kb.main)
        else:    
            await message.answer('–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥')
            await state.set_state(States.menu)
            await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money}', 
                                 reply_markup=kb.main)
    
    
    elif message.text == '–Ω–∞–∑–∞–¥':
        await state.set_state(States.menu)
        await message.answer(f'{user.name}, —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${user.money}', 
                             reply_markup=kb.main)
    
    
    else:
        await message.answer('–∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')
    
    
@router.message(F.text)
async def what(message: Message):
    await message.answer('–∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é')